# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddPostsToUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input CreateManyPostsInput {
  """Array of records to create"""
  posts: [CreatePostInput!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateOnePostInput {
  """The record to create"""
  post: CreatePostInput!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreatePostInput {
  author: String!
  description: String!
  postArticle: DateTime!
  publish: DateTime!
  title: String!
}

input CreateUserInput {
  email: String!
  name: String!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyPostsInput {
  """Filter to find records to delete"""
  filter: PostDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOnePostInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

type Mutation {
  addPostsToUser(input: AddPostsToUserInput!): User!
  createManyPosts(input: CreateManyPostsInput!): [Post!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOnePost(input: CreateOnePostInput!): Post!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyPosts(input: DeleteManyPostsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOnePost(input: DeleteOnePostInput!): PostDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  removePostsFromUser(input: RemovePostsFromUserInput!): User!
  removeUserFromPost(input: RemoveUserFromPostInput!): Post!
  setPostsOnUser(input: SetPostsOnUserInput!): User!
  setUserOnPost(input: SetUserOnPostInput!): Post!
  updateManyPosts(input: UpdateManyPostsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOnePost(input: UpdateOnePostInput!): Post!
  updateOneUser(input: UpdateOneUserInput!): User!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Post {
  author: String!
  createdAt: DateTime!
  deletedAt: DateTime!
  description: String!
  id: String!
  postArticle: String!
  publish: String!
  title: String!
  updatedAt: DateTime!
  user: User!
}

type PostAggregateGroupBy {
  author: String
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  postArticle: String
  publish: String
  title: String
  updatedAt: DateTime
}

type PostConnection {
  """Array of nodes."""
  nodes: [Post!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type PostCountAggregate {
  author: Int
  createdAt: Int
  deletedAt: Int
  description: Int
  id: Int
  postArticle: Int
  publish: Int
  title: Int
  updatedAt: Int
}

input PostDeleteFilter {
  and: [PostDeleteFilter!]
  author: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [PostDeleteFilter!]
  postArticle: StringFieldComparison
  publish: StringFieldComparison
  title: StringFieldComparison
  updatedAt: DateFieldComparison
}

type PostDeleteResponse {
  author: String
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  postArticle: String
  publish: String
  title: String
  updatedAt: DateTime
}

input PostFilter {
  and: [PostFilter!]
  author: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [PostFilter!]
  postArticle: StringFieldComparison
  publish: StringFieldComparison
  title: StringFieldComparison
  updatedAt: DateFieldComparison
  user: PostFilterUserFilter
}

input PostFilterUserFilter {
  and: [PostFilterUserFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [PostFilterUserFilter!]
  updatedAt: DateFieldComparison
}

type PostMaxAggregate {
  author: String
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  postArticle: String
  publish: String
  title: String
  updatedAt: DateTime
}

type PostMinAggregate {
  author: String
  createdAt: DateTime
  deletedAt: DateTime
  description: String
  id: String
  postArticle: String
  publish: String
  title: String
  updatedAt: DateTime
}

input PostSort {
  direction: SortDirection!
  field: PostSortFields!
  nulls: SortNulls
}

enum PostSortFields {
  author
  createdAt
  deletedAt
  description
  id
  postArticle
  publish
  title
  updatedAt
}

input PostUpdateFilter {
  and: [PostUpdateFilter!]
  author: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [PostUpdateFilter!]
  postArticle: StringFieldComparison
  publish: StringFieldComparison
  title: StringFieldComparison
  updatedAt: DateFieldComparison
}

type Query {
  post(
    """The id of the record to find."""
    id: ID!
  ): Post
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
}

input RemovePostsFromUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input RemoveUserFromPostInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

input SetPostsOnUserInput {
  """The id of the record."""
  id: ID!

  """The ids of the relations."""
  relationIds: [ID!]!
}

input SetUserOnPostInput {
  """The id of the record."""
  id: ID!

  """The id of relation."""
  relationId: ID!
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateManyPostsInput {
  """Filter used to find fields to update"""
  filter: PostUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePostInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserInput!
}

input UpdateOnePostInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePostInput!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserInput!
}

input UpdatePostInput {
  author: String
  description: String
  id: String!
  postArticle: DateTime
  publish: DateTime
  title: String
}

input UpdateUserInput {
  email: String
  id: String!
  name: String
}

type User {
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String!
  id: String!
  name: String!
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): UserPostsConnection
  updatedAt: DateTime!
}

type UserAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: String
  name: String
  updatedAt: DateTime
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  createdAt: Int
  deletedAt: Int
  email: Int
  id: Int
  name: Int
  updatedAt: Int
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [UserDeleteFilter!]
  updatedAt: DateFieldComparison
}

type UserDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: String
  name: String
  updatedAt: DateTime
}

input UserFilter {
  and: [UserFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [UserFilter!]
  posts: UserFilterPostFilter
  updatedAt: DateFieldComparison
}

input UserFilterPostFilter {
  and: [UserFilterPostFilter!]
  author: StringFieldComparison
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  description: StringFieldComparison
  id: StringFieldComparison
  or: [UserFilterPostFilter!]
  postArticle: StringFieldComparison
  publish: StringFieldComparison
  title: StringFieldComparison
  updatedAt: DateFieldComparison
}

type UserMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: String
  name: String
  updatedAt: DateTime
}

type UserMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  email: String
  id: String
  name: String
  updatedAt: DateTime
}

type UserPostsConnection {
  """Array of nodes."""
  nodes: [Post!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  createdAt
  deletedAt
  email
  id
  name
  updatedAt
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  createdAt: DateFieldComparison
  deletedAt: DateFieldComparison
  email: StringFieldComparison
  id: StringFieldComparison
  name: StringFieldComparison
  or: [UserUpdateFilter!]
  updatedAt: DateFieldComparison
}