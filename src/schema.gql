# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comments {
  commentBody: String!
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postId: String!
  updatedAt: DateTime
  userId: String!
}

type CommentsAggregateGroupBy {
  commentBody: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postId: String
  updatedAt: DateTime
  userId: String
}

type CommentsConnection {
  """Array of nodes."""
  nodes: [Comments!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type CommentsCountAggregate {
  commentBody: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  postId: Int
  updatedAt: Int
  userId: Int
}

input CommentsCreatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input CommentsDeleteFilter {
  and: [CommentsDeleteFilter!]
  commentBody: StringFieldComparison
  createdAt: CommentsCreatedAtFilterComparison
  deletedAt: CommentsDeletedAtFilterComparison
  id: CommentsIdFilterComparison
  or: [CommentsDeleteFilter!]
  postId: StringFieldComparison
  updatedAt: CommentsUpdatedAtFilterComparison
  userId: StringFieldComparison
}

type CommentsDeleteResponse {
  commentBody: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postId: String
  updatedAt: DateTime
  userId: String
}

input CommentsDeletedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input CommentsFilter {
  and: [CommentsFilter!]
  commentBody: StringFieldComparison
  createdAt: CommentsCreatedAtFilterComparison
  deletedAt: CommentsDeletedAtFilterComparison
  id: CommentsIdFilterComparison
  or: [CommentsFilter!]
  postId: StringFieldComparison
  updatedAt: CommentsUpdatedAtFilterComparison
  userId: StringFieldComparison
}

input CommentsIdFilterComparison {
  eq: String
  in: [String!]
  neq: String
  notIn: [String!]
}

type CommentsMaxAggregate {
  commentBody: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postId: String
  updatedAt: DateTime
  userId: String
}

type CommentsMinAggregate {
  commentBody: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postId: String
  updatedAt: DateTime
  userId: String
}

input CommentsSort {
  direction: SortDirection!
  field: CommentsSortFields!
  nulls: SortNulls
}

enum CommentsSortFields {
  commentBody
  createdAt
  deletedAt
  id
  postId
  updatedAt
  userId
}

input CommentsUpdateFilter {
  and: [CommentsUpdateFilter!]
  commentBody: StringFieldComparison
  createdAt: CommentsCreatedAtFilterComparison
  deletedAt: CommentsDeletedAtFilterComparison
  id: CommentsIdFilterComparison
  or: [CommentsUpdateFilter!]
  postId: StringFieldComparison
  updatedAt: CommentsUpdatedAtFilterComparison
  userId: StringFieldComparison
}

input CommentsUpdatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

type Complaint {
  comentId: String!
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float!
  updatedAt: DateTime
  userId: String!
}

type ComplaintAggregateGroupBy {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

type ComplaintAvgAggregate {
  type: Float
}

type ComplaintConnection {
  """Array of nodes."""
  nodes: [Complaint!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type ComplaintCountAggregate {
  comentId: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  type: Int
  updatedAt: Int
  userId: Int
}

input ComplaintCreatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input ComplaintDeleteFilter {
  and: [ComplaintDeleteFilter!]
  comentId: StringFieldComparison
  createdAt: ComplaintCreatedAtFilterComparison
  deletedAt: ComplaintDeletedAtFilterComparison
  id: ComplaintIdFilterComparison
  or: [ComplaintDeleteFilter!]
  type: NumberFieldComparison
  updatedAt: ComplaintUpdatedAtFilterComparison
  userId: StringFieldComparison
}

type ComplaintDeleteResponse {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

input ComplaintDeletedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input ComplaintFilter {
  and: [ComplaintFilter!]
  comentId: StringFieldComparison
  createdAt: ComplaintCreatedAtFilterComparison
  deletedAt: ComplaintDeletedAtFilterComparison
  id: ComplaintIdFilterComparison
  or: [ComplaintFilter!]
  type: NumberFieldComparison
  updatedAt: ComplaintUpdatedAtFilterComparison
  userId: StringFieldComparison
}

input ComplaintIdFilterComparison {
  eq: String
  in: [String!]
  neq: String
  notIn: [String!]
}

type ComplaintMaxAggregate {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

type ComplaintMinAggregate {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

input ComplaintSort {
  direction: SortDirection!
  field: ComplaintSortFields!
  nulls: SortNulls
}

enum ComplaintSortFields {
  comentId
  createdAt
  deletedAt
  id
  type
  updatedAt
  userId
}

type ComplaintSumAggregate {
  type: Float
}

input ComplaintUpdateFilter {
  and: [ComplaintUpdateFilter!]
  comentId: StringFieldComparison
  createdAt: ComplaintCreatedAtFilterComparison
  deletedAt: ComplaintDeletedAtFilterComparison
  id: ComplaintIdFilterComparison
  or: [ComplaintUpdateFilter!]
  type: NumberFieldComparison
  updatedAt: ComplaintUpdatedAtFilterComparison
  userId: StringFieldComparison
}

input ComplaintUpdatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input CreateCommentInput {
  commentBody: String!
  postId: Float!
  userId: String!
}

input CreateComplaintInput {
  comentId: String!
  type: Float!
  userId: String!
}

input CreateLikeInput {
  comentId: String!
  type: Float!
  userId: String!
}

input CreateManyCommentsInput {
  """Array of records to create"""
  comments: [CreateCommentInput!]!
}

input CreateManyComplaintsInput {
  """Array of records to create"""
  complaints: [CreateComplaintInput!]!
}

input CreateManyLikesInput {
  """Array of records to create"""
  likes: [CreateLikeInput!]!
}

input CreateManyPostsInput {
  """Array of records to create"""
  posts: [CreatePostInput!]!
}

input CreateManySessionsInput {
  """Array of records to create"""
  sessions: [CreateSessionInput!]!
}

input CreateManyUsersInput {
  """Array of records to create"""
  users: [CreateUserInput!]!
}

input CreateOneCommentsInput {
  """The record to create"""
  comments: CreateCommentInput!
}

input CreateOneComplaintInput {
  """The record to create"""
  complaint: CreateComplaintInput!
}

input CreateOneLikeInput {
  """The record to create"""
  like: CreateLikeInput!
}

input CreateOnePostInput {
  """The record to create"""
  post: CreatePostInput!
}

input CreateOneSessionInput {
  """The record to create"""
  session: CreateSessionInput!
}

input CreateOneUserInput {
  """The record to create"""
  user: CreateUserInput!
}

input CreatePostInput {
  category: String!
  postBody: String!
  postDateTime: DateTime!
  postImageURL: String!
  postStatus: Float!
  postTitle: String!
  postVisibility: Float!
  tags: String!
}

input CreateSessionInput {
  token: String!
}

input CreateUserInput {
  userEmail: String!
  userName: String!
  userPassword: String!
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyCommentsInput {
  """Filter to find records to delete"""
  filter: CommentsDeleteFilter!
}

input DeleteManyComplaintsInput {
  """Filter to find records to delete"""
  filter: ComplaintDeleteFilter!
}

input DeleteManyLikesInput {
  """Filter to find records to delete"""
  filter: LikeDeleteFilter!
}

input DeleteManyPostsInput {
  """Filter to find records to delete"""
  filter: PostDeleteFilter!
}

type DeleteManyResponse {
  """The number of records deleted."""
  deletedCount: Int!
}

input DeleteManySessionsInput {
  """Filter to find records to delete"""
  filter: SessionDeleteFilter!
}

input DeleteManyUsersInput {
  """Filter to find records to delete"""
  filter: UserDeleteFilter!
}

input DeleteOneCommentsInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneComplaintInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneLikeInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOnePostInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneSessionInput {
  """The id of the record to delete."""
  id: ID!
}

input DeleteOneUserInput {
  """The id of the record to delete."""
  id: ID!
}

type Like {
  comentId: String!
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float!
  updatedAt: DateTime
  userId: String!
}

type LikeAggregateGroupBy {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

type LikeAvgAggregate {
  type: Float
}

type LikeConnection {
  """Array of nodes."""
  nodes: [Like!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type LikeCountAggregate {
  comentId: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  type: Int
  updatedAt: Int
  userId: Int
}

input LikeCreatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input LikeDeleteFilter {
  and: [LikeDeleteFilter!]
  comentId: StringFieldComparison
  createdAt: LikeCreatedAtFilterComparison
  deletedAt: LikeDeletedAtFilterComparison
  id: LikeIdFilterComparison
  or: [LikeDeleteFilter!]
  type: NumberFieldComparison
  updatedAt: LikeUpdatedAtFilterComparison
  userId: StringFieldComparison
}

type LikeDeleteResponse {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

input LikeDeletedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input LikeFilter {
  and: [LikeFilter!]
  comentId: StringFieldComparison
  createdAt: LikeCreatedAtFilterComparison
  deletedAt: LikeDeletedAtFilterComparison
  id: LikeIdFilterComparison
  or: [LikeFilter!]
  type: NumberFieldComparison
  updatedAt: LikeUpdatedAtFilterComparison
  userId: StringFieldComparison
}

input LikeIdFilterComparison {
  eq: String
  in: [String!]
  neq: String
  notIn: [String!]
}

type LikeMaxAggregate {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

type LikeMinAggregate {
  comentId: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  type: Float
  updatedAt: DateTime
  userId: String
}

input LikeSort {
  direction: SortDirection!
  field: LikeSortFields!
  nulls: SortNulls
}

enum LikeSortFields {
  comentId
  createdAt
  deletedAt
  id
  type
  updatedAt
  userId
}

type LikeSumAggregate {
  type: Float
}

input LikeUpdateFilter {
  and: [LikeUpdateFilter!]
  comentId: StringFieldComparison
  createdAt: LikeCreatedAtFilterComparison
  deletedAt: LikeDeletedAtFilterComparison
  id: LikeIdFilterComparison
  or: [LikeUpdateFilter!]
  type: NumberFieldComparison
  updatedAt: LikeUpdatedAtFilterComparison
  userId: StringFieldComparison
}

input LikeUpdatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

type Mutation {
  createManyComments(input: CreateManyCommentsInput!): [Comments!]!
  createManyComplaints(input: CreateManyComplaintsInput!): [Complaint!]!
  createManyLikes(input: CreateManyLikesInput!): [Like!]!
  createManyPosts(input: CreateManyPostsInput!): [Post!]!
  createManySessions(input: CreateManySessionsInput!): [Session!]!
  createManyUsers(input: CreateManyUsersInput!): [User!]!
  createOneComments(input: CreateOneCommentsInput!): Comments!
  createOneComplaint(input: CreateOneComplaintInput!): Complaint!
  createOneLike(input: CreateOneLikeInput!): Like!
  createOnePost(input: CreateOnePostInput!): Post!
  createOneSession(input: CreateOneSessionInput!): Session!
  createOneUser(input: CreateOneUserInput!): User!
  deleteManyComments(input: DeleteManyCommentsInput!): DeleteManyResponse!
  deleteManyComplaints(input: DeleteManyComplaintsInput!): DeleteManyResponse!
  deleteManyLikes(input: DeleteManyLikesInput!): DeleteManyResponse!
  deleteManyPosts(input: DeleteManyPostsInput!): DeleteManyResponse!
  deleteManySessions(input: DeleteManySessionsInput!): DeleteManyResponse!
  deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
  deleteOneComments(input: DeleteOneCommentsInput!): CommentsDeleteResponse!
  deleteOneComplaint(input: DeleteOneComplaintInput!): ComplaintDeleteResponse!
  deleteOneLike(input: DeleteOneLikeInput!): LikeDeleteResponse!
  deleteOnePost(input: DeleteOnePostInput!): PostDeleteResponse!
  deleteOneSession(input: DeleteOneSessionInput!): SessionDeleteResponse!
  deleteOneUser(input: DeleteOneUserInput!): UserDeleteResponse!
  updateManyComments(input: UpdateManyCommentsInput!): UpdateManyResponse!
  updateManyComplaints(input: UpdateManyComplaintsInput!): UpdateManyResponse!
  updateManyLikes(input: UpdateManyLikesInput!): UpdateManyResponse!
  updateManyPosts(input: UpdateManyPostsInput!): UpdateManyResponse!
  updateManySessions(input: UpdateManySessionsInput!): UpdateManyResponse!
  updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
  updateOneComments(input: UpdateOneCommentsInput!): Comments!
  updateOneComplaint(input: UpdateOneComplaintInput!): Complaint!
  updateOneLike(input: UpdateOneLikeInput!): Like!
  updateOnePost(input: UpdateOnePostInput!): Post!
  updateOneSession(input: UpdateOneSessionInput!): Session!
  updateOneUser(input: UpdateOneUserInput!): User!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type OffsetPageInfo {
  """true if paging forward and there are more records."""
  hasNextPage: Boolean

  """true if paging backwards and there are more records."""
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """Limit the number of records returned"""
  limit: Int

  """Offset to start returning records from"""
  offset: Int
}

type Post {
  category: String!
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postBody: String!
  postDateTime: DateTime!
  postImageURL: String!
  postStatus: Float!
  postTitle: String!
  postVisibility: Float!
  tags: String!
  updatedAt: DateTime
}

type PostAggregateGroupBy {
  category: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postBody: String
  postDateTime: DateTime
  postImageURL: String
  postStatus: Float
  postTitle: String
  postVisibility: Float
  tags: String
  updatedAt: DateTime
}

type PostAvgAggregate {
  postStatus: Float
  postVisibility: Float
}

type PostConnection {
  """Array of nodes."""
  nodes: [Post!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type PostCountAggregate {
  category: Int
  createdAt: Int
  deletedAt: Int
  id: Int
  postBody: Int
  postDateTime: Int
  postImageURL: Int
  postStatus: Int
  postTitle: Int
  postVisibility: Int
  tags: Int
  updatedAt: Int
}

input PostCreatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input PostDeleteFilter {
  and: [PostDeleteFilter!]
  category: StringFieldComparison
  createdAt: PostCreatedAtFilterComparison
  deletedAt: PostDeletedAtFilterComparison
  id: PostIdFilterComparison
  or: [PostDeleteFilter!]
  postBody: StringFieldComparison
  postDateTime: DateFieldComparison
  postImageURL: StringFieldComparison
  postStatus: NumberFieldComparison
  postTitle: StringFieldComparison
  postVisibility: NumberFieldComparison
  tags: StringFieldComparison
  updatedAt: PostUpdatedAtFilterComparison
}

type PostDeleteResponse {
  category: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postBody: String
  postDateTime: DateTime
  postImageURL: String
  postStatus: Float
  postTitle: String
  postVisibility: Float
  tags: String
  updatedAt: DateTime
}

input PostDeletedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input PostFilter {
  and: [PostFilter!]
  category: StringFieldComparison
  createdAt: PostCreatedAtFilterComparison
  deletedAt: PostDeletedAtFilterComparison
  id: PostIdFilterComparison
  or: [PostFilter!]
  postBody: StringFieldComparison
  postDateTime: DateFieldComparison
  postImageURL: StringFieldComparison
  postStatus: NumberFieldComparison
  postTitle: StringFieldComparison
  postVisibility: NumberFieldComparison
  tags: StringFieldComparison
  updatedAt: PostUpdatedAtFilterComparison
}

input PostIdFilterComparison {
  eq: String
  in: [String!]
  neq: String
  notIn: [String!]
}

type PostMaxAggregate {
  category: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postBody: String
  postDateTime: DateTime
  postImageURL: String
  postStatus: Float
  postTitle: String
  postVisibility: Float
  tags: String
  updatedAt: DateTime
}

type PostMinAggregate {
  category: String
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  postBody: String
  postDateTime: DateTime
  postImageURL: String
  postStatus: Float
  postTitle: String
  postVisibility: Float
  tags: String
  updatedAt: DateTime
}

input PostSort {
  direction: SortDirection!
  field: PostSortFields!
  nulls: SortNulls
}

enum PostSortFields {
  category
  createdAt
  deletedAt
  id
  postBody
  postDateTime
  postImageURL
  postStatus
  postTitle
  postVisibility
  tags
  updatedAt
}

type PostSumAggregate {
  postStatus: Float
  postVisibility: Float
}

input PostUpdateFilter {
  and: [PostUpdateFilter!]
  category: StringFieldComparison
  createdAt: PostCreatedAtFilterComparison
  deletedAt: PostDeletedAtFilterComparison
  id: PostIdFilterComparison
  or: [PostUpdateFilter!]
  postBody: StringFieldComparison
  postDateTime: DateFieldComparison
  postImageURL: StringFieldComparison
  postStatus: NumberFieldComparison
  postTitle: StringFieldComparison
  postVisibility: NumberFieldComparison
  tags: StringFieldComparison
  updatedAt: PostUpdatedAtFilterComparison
}

input PostUpdatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

type Query {
  comments(
    """Specify to filter the records returned."""
    filter: CommentsFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [CommentsSort!] = []
  ): CommentsConnection!
  complaint(
    """The id of the record to find."""
    id: ID!
  ): Complaint
  complaints(
    """Specify to filter the records returned."""
    filter: ComplaintFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [ComplaintSort!] = []
  ): ComplaintConnection!
  like(
    """The id of the record to find."""
    id: ID!
  ): Like
  likes(
    """Specify to filter the records returned."""
    filter: LikeFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [LikeSort!] = []
  ): LikeConnection!
  post(
    """The id of the record to find."""
    id: ID!
  ): Post
  posts(
    """Specify to filter the records returned."""
    filter: PostFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [PostSort!] = []
  ): PostConnection!
  session(
    """The id of the record to find."""
    id: ID!
  ): Session
  sessions(
    """Specify to filter the records returned."""
    filter: SessionFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [SessionSort!] = []
  ): SessionConnection!
  user(
    """The id of the record to find."""
    id: ID!
  ): User
  users(
    """Specify to filter the records returned."""
    filter: UserFilter = {}

    """Limit or page results."""
    paging: OffsetPaging = {limit: 10}

    """Specify to sort results."""
    sorting: [UserSort!] = []
  ): UserConnection!
}

type Session {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
}

type SessionAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
}

type SessionConnection {
  """Array of nodes."""
  nodes: [Session!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type SessionCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  updatedAt: Int
}

input SessionCreatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input SessionDeleteFilter {
  and: [SessionDeleteFilter!]
  createdAt: SessionCreatedAtFilterComparison
  deletedAt: SessionDeletedAtFilterComparison
  id: SessionIdFilterComparison
  or: [SessionDeleteFilter!]
  updatedAt: SessionUpdatedAtFilterComparison
}

type SessionDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
}

input SessionDeletedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input SessionFilter {
  and: [SessionFilter!]
  createdAt: SessionCreatedAtFilterComparison
  deletedAt: SessionDeletedAtFilterComparison
  id: SessionIdFilterComparison
  or: [SessionFilter!]
  updatedAt: SessionUpdatedAtFilterComparison
}

input SessionIdFilterComparison {
  eq: String
  in: [String!]
  neq: String
  notIn: [String!]
}

type SessionMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
}

type SessionMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
}

input SessionSort {
  direction: SortDirection!
  field: SessionSortFields!
  nulls: SortNulls
}

enum SessionSortFields {
  createdAt
  deletedAt
  id
  updatedAt
}

input SessionUpdateFilter {
  and: [SessionUpdateFilter!]
  createdAt: SessionCreatedAtFilterComparison
  deletedAt: SessionDeletedAtFilterComparison
  id: SessionIdFilterComparison
  or: [SessionUpdateFilter!]
  updatedAt: SessionUpdatedAtFilterComparison
}

input SessionUpdatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

"""Sort Directions"""
enum SortDirection {
  ASC
  DESC
}

"""Sort Nulls Options"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateCommentInput {
  commentBody: String
  id: Float!
  postId: Float
  userId: String
}

input UpdateComplaintInput {
  comentId: String
  id: Float!
  type: Float
  userId: String
}

input UpdateLikeInput {
  comentId: String
  id: Float!
  type: Float
  userId: String
}

input UpdateManyCommentsInput {
  """Filter used to find fields to update"""
  filter: CommentsUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateCommentInput!
}

input UpdateManyComplaintsInput {
  """Filter used to find fields to update"""
  filter: ComplaintUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateComplaintInput!
}

input UpdateManyLikesInput {
  """Filter used to find fields to update"""
  filter: LikeUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateLikeInput!
}

input UpdateManyPostsInput {
  """Filter used to find fields to update"""
  filter: PostUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdatePostInput!
}

type UpdateManyResponse {
  """The number of records updated."""
  updatedCount: Int!
}

input UpdateManySessionsInput {
  """Filter used to find fields to update"""
  filter: SessionUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateSessionInput!
}

input UpdateManyUsersInput {
  """Filter used to find fields to update"""
  filter: UserUpdateFilter!

  """The update to apply to all records found using the filter"""
  update: UpdateUserInput!
}

input UpdateOneCommentsInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateCommentInput!
}

input UpdateOneComplaintInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateComplaintInput!
}

input UpdateOneLikeInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateLikeInput!
}

input UpdateOnePostInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdatePostInput!
}

input UpdateOneSessionInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateSessionInput!
}

input UpdateOneUserInput {
  """The id of the record to update"""
  id: ID!

  """The update to apply."""
  update: UpdateUserInput!
}

input UpdatePostInput {
  category: String
  id: String!
  postBody: String
  postDateTime: DateTime
  postImageURL: String
  postStatus: Float
  postTitle: String
  postVisibility: Float
  tags: String
}

input UpdateSessionInput {
  id: String!
  token: String
}

input UpdateUserInput {
  id: String!
  userEmail: String
  userName: String
  userPassword: String
}

type User {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
  userEmail: String!
  userName: String!
}

type UserAggregateGroupBy {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
  userEmail: String
  userName: String
}

type UserConnection {
  """Array of nodes."""
  nodes: [User!]!

  """Paging information"""
  pageInfo: OffsetPageInfo!

  """Fetch total count of records"""
  totalCount: Int!
}

type UserCountAggregate {
  createdAt: Int
  deletedAt: Int
  id: Int
  updatedAt: Int
  userEmail: Int
  userName: Int
}

input UserCreatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input UserDeleteFilter {
  and: [UserDeleteFilter!]
  createdAt: UserCreatedAtFilterComparison
  deletedAt: UserDeletedAtFilterComparison
  id: UserIdFilterComparison
  or: [UserDeleteFilter!]
  updatedAt: UserUpdatedAtFilterComparison
  userEmail: StringFieldComparison
  userName: StringFieldComparison
}

type UserDeleteResponse {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
  userEmail: String
  userName: String
}

input UserDeletedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}

input UserFilter {
  and: [UserFilter!]
  createdAt: UserCreatedAtFilterComparison
  deletedAt: UserDeletedAtFilterComparison
  id: UserIdFilterComparison
  or: [UserFilter!]
  updatedAt: UserUpdatedAtFilterComparison
  userEmail: StringFieldComparison
  userName: StringFieldComparison
}

input UserIdFilterComparison {
  eq: String
  in: [String!]
  neq: String
  notIn: [String!]
}

type UserMaxAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
  userEmail: String
  userName: String
}

type UserMinAggregate {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  updatedAt: DateTime
  userEmail: String
  userName: String
}

input UserSort {
  direction: SortDirection!
  field: UserSortFields!
  nulls: SortNulls
}

enum UserSortFields {
  createdAt
  deletedAt
  id
  updatedAt
  userEmail
  userName
}

input UserUpdateFilter {
  and: [UserUpdateFilter!]
  createdAt: UserCreatedAtFilterComparison
  deletedAt: UserDeletedAtFilterComparison
  id: UserIdFilterComparison
  or: [UserUpdateFilter!]
  updatedAt: UserUpdatedAtFilterComparison
  userEmail: StringFieldComparison
  userName: StringFieldComparison
}

input UserUpdatedAtFilterComparison {
  eq: DateTime
  in: [DateTime!]
  neq: DateTime
  notIn: [DateTime!]
}